@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":AnimalLogicManager" as AnimalLogicManager LOGIC_COLOR
participant ":AnimalCatalogParser" as AnimalCatalogParser LOGIC_COLOR
participant ":UnmarkTaskCommandParser" as UnmarkTaskCommandParser LOGIC_COLOR
participant ":UnmarkTaskCommand" as UnmarkTaskCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box AnimalModel MODEL_COLOR_T1
participant ":AnimalModel" as AnimalModel MODEL_COLOR
participant ":Animal" as Animal MODEL_COLOR
participant ":TaskList" as TaskList MODEL_COLOR
participant ":Task" as Task MODEL_COLOR
end box

[-> AnimalLogicManager : execute("unmark 1 1")
activate AnimalLogicManager

AnimalLogicManager -> AnimalCatalogParser : parseCommand("unmark 1 2")")
activate AnimalCatalogParser

create UnmarkTaskCommandParser
AnimalCatalogParser -> UnmarkTaskCommandParser
activate UnmarkTaskCommandParser

UnmarkTaskCommandParser --> AnimalCatalogParser
deactivate UnmarkTaskCommandParser

AnimalCatalogParser -> UnmarkTaskCommandParser : parse("1 2")")
activate UnmarkTaskCommandParser

create UnmarkTaskCommand
UnmarkTaskCommandParser -> UnmarkTaskCommand
activate UnmarkTaskCommand

UnmarkTaskCommand --> UnmarkTaskCommandParser
deactivate UnmarkTaskCommand

UnmarkTaskCommandParser --> AnimalCatalogParser
deactivate UnmarkTaskCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
UnmarkTaskCommandParser -[hidden]-> AnimalCatalogParser
destroy UnmarkTaskCommandParser

AnimalCatalogParser --> AnimalLogicManager
deactivate AnimalCatalogParser

AnimalLogicManager -> UnmarkTaskCommand : execute(model)
activate UnmarkTaskCommand

UnmarkTaskCommand -> AnimalModel : getFilteredAnimalList()
activate AnimalModel

AnimalModel --> UnmarkTaskCommand
deactivate AnimalModel

UnmarkTaskCommand -> AnimalModel : updateTask(animalToMark, [1], false)
activate AnimalModel

AnimalModel -> Animal : updateTask([1], false)
activate Animal

Animal -> TaskList : updateTaskList([1], false)
activate TaskList

loop for each task index
    TaskList -> Task : updateTask(false)
    activate Task

    Task --> TaskList
    deactivate Task

end

TaskList --> Animal
deactivate TaskList

Animal --> AnimalModel : updatedAnimal
deactivate Animal

AnimalModel -> AnimalModel : setAnimal(animalToMark, updatedAnimal)
activate AnimalModel

AnimalModel --> AnimalModel
deactivate AnimalModel

AnimalModel -> AnimalModel : updateFilteredAnimalList(unused -> true)
activate AnimalModel

AnimalModel --> AnimalModel
deactivate AnimalModel

AnimalModel --> UnmarkTaskCommand
deactivate AnimalModel

create CommandResult
UnmarkTaskCommand -> CommandResult
activate CommandResult

CommandResult --> UnmarkTaskCommand
deactivate CommandResult

UnmarkTaskCommand --> AnimalLogicManager : result
deactivate UnmarkTaskCommand

[<--AnimalLogicManager
deactivate AnimalLogicManager
@enduml
