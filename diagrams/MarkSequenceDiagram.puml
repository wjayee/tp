@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":AnimalLogicManager" as AnimalLogicManager LOGIC_COLOR
participant ":AnimalCatalogParser" as AnimalCatalogParser LOGIC_COLOR
participant ":MarkTaskCommandParser" as MarkTaskCommandParser LOGIC_COLOR
participant ":MarkTaskCommand" as MarkTaskCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box AnimalModel MODEL_COLOR_T1
participant ":AnimalModel" as AnimalModel MODEL_COLOR
participant ":Animal" as Animal MODEL_COLOR
participant ":TaskList" as TaskList MODEL_COLOR
participant ":Task" as Task MODEL_COLOR
end box

[-> AnimalLogicManager : execute("mark 1 1")
activate AnimalLogicManager

AnimalLogicManager -> AnimalCatalogParser : parseCommand("mark 1 2")")
activate AnimalCatalogParser

create MarkTaskCommandParser
AnimalCatalogParser -> MarkTaskCommandParser
activate MarkTaskCommandParser

MarkTaskCommandParser --> AnimalCatalogParser
deactivate MarkTaskCommandParser

AnimalCatalogParser -> MarkTaskCommandParser : parse("1 2")")
activate MarkTaskCommandParser

create MarkTaskCommand
MarkTaskCommandParser -> MarkTaskCommand
activate MarkTaskCommand

MarkTaskCommand --> MarkTaskCommandParser
deactivate MarkTaskCommand

MarkTaskCommandParser --> AnimalCatalogParser
deactivate MarkTaskCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
MarkTaskCommandParser -[hidden]-> AnimalCatalogParser
destroy MarkTaskCommandParser

AnimalCatalogParser --> AnimalLogicManager
deactivate AnimalCatalogParser

AnimalLogicManager -> MarkTaskCommand : execute(model)
activate MarkTaskCommand

MarkTaskCommand -> AnimalModel : getFilteredAnimalList()
activate AnimalModel

AnimalModel --> MarkTaskCommand
deactivate AnimalModel

MarkTaskCommand -> AnimalModel : updateTask(animalToMark, [1], true)
activate AnimalModel

AnimalModel -> Animal : updateTask([1], true)
activate Animal

Animal -> TaskList : updateTaskList([1], true)
activate TaskList

loop for each task index
    TaskList -> Task : updateTask(true)
    activate Task

    Task --> TaskList
    deactivate Task

end

TaskList --> Animal
deactivate TaskList

Animal --> AnimalModel : updatedAnimal
deactivate Animal

AnimalModel -> AnimalModel : setAnimal(animalToMark, updatedAnimal)
activate AnimalModel

AnimalModel --> AnimalModel
deactivate AnimalModel

AnimalModel -> AnimalModel : updateFilteredAnimalList(unused -> true)
activate AnimalModel

AnimalModel --> AnimalModel
deactivate AnimalModel

AnimalModel --> MarkTaskCommand
deactivate AnimalModel

create CommandResult
MarkTaskCommand -> CommandResult
activate CommandResult

CommandResult --> MarkTaskCommand
deactivate CommandResult

MarkTaskCommand --> AnimalLogicManager : result
deactivate MarkTaskCommand

[<--AnimalLogicManager
deactivate AnimalLogicManager
@enduml
